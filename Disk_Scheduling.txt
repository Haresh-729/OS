// PERFORMNED BY HARESH KURADE (C200) 60004230277.
// DISK SCHEDULING ALGORITHMS (FCFS, SSTF, SCAN, LOOK, CSCAN, CLOOK)
/*##############################################################################
######################### User Input remaining ###############################
##############################################################################
##############################################################################*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

// Function to calculate total seek time
int calculateSeekTime(vector<int> requests, int head) {
    int seekTime = 0;
    int currentTrack = head;
    for (int i = 0; i < requests.size(); ++i) {
        seekTime += abs(requests[i] - currentTrack);
        currentTrack = requests[i];
    }
    return seekTime;
}

// First Come First Serve (FCFS) Disk Scheduling Algorithm
int fcfs(vector<int> requests, int head) {
    return calculateSeekTime(requests, head);
}

// Shortest Seek Time First (SSTF) Disk Scheduling Algorithm
int sstf(vector<int> requests, int head) {
    int seekTime = 0;
    int currentTrack = head;
    while (!requests.empty()) {
        auto it = min_element(requests.begin(), requests.end(), [currentTrack](int a, int b) {
            return abs(a - currentTrack) < abs(b - currentTrack);
        });
        seekTime += abs(*it - currentTrack);
        currentTrack = *it;
        requests.erase(it);
    }
    return seekTime;
}

// SCAN Disk Scheduling Algorithm
int scan(vector<int> requests, int head, int direction) {
    int seekTime = 0;
    int currentTrack = head;
    sort(requests.begin(), requests.end());
    auto it = find(requests.begin(), requests.end(), head);
    if (direction == 0) { // Towards 0
        for (auto i = it; i >= requests.begin(); --i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
        seekTime += currentTrack; // Move to track 0;
        currentTrack = 0;
        for (auto i = it + 1; i < requests.end(); ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
    } else { // Towards max track
        for (auto i = it; i < requests.end(); ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
        seekTime += abs(requests.back() - currentTrack); // Move to max track
        currentTrack = requests.back();
        for (auto i = it - 1; i >= requests.begin(); --i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
    }
    return seekTime;
}

// LOOK Disk Scheduling Algorithm
int look(vector<int> requests, int head, int direction) {
    int seekTime = 0;
    int currentTrack = head;
    sort(requests.begin(), requests.end());
    auto it = find(requests.begin(), requests.end(), head);
    if (direction == 0) { // Towards 0
        for (auto i = it; i >= requests.begin(); --i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
        for (auto i = it + 1; i < requests.end(); ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
    } else { // Towards max track
        for (auto i = it; i < requests.end(); ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
        for (auto i = it - 1; i >= requests.begin(); --i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
    }
    return seekTime;
}

// Circular SCAN (CSCAN) Disk Scheduling Algorithm
int cscan(vector<int> requests, int head, int direction) {
    int seekTime = 0;
    int currentTrack = head;
    sort(requests.begin(), requests.end());
    auto it = find(requests.begin(), requests.end(), head);
    if (direction == 0) { // Towards 0
        for (auto i = it; i >= requests.begin();) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
            ++i;
        }
        seekTime += abs(requests.front() - currentTrack); // Move to track 0;
        currentTrack = requests.front();
        for (auto i = requests.begin(); i < it; ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
    } else { // Towards max track
        for (auto i = it; i < requests.end(); ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
        seekTime += abs(requests.back() - currentTrack); // Move to max track
        currentTrack = requests.back();
        for (auto i = it - 1; i >= requests.begin();) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
            --i;
        }
    }
    return seekTime;
}

// Circular LOOK (CLOOK) Disk Scheduling Algorithm
int clook(vector<int> requests, int head, int direction) {
    int seekTime = 0;
    int currentTrack = head;
    sort(requests.begin(), requests.end());
    auto it = find(requests.begin(), requests.end(), head);
    if (direction == 0) { // Towards 0
        for (auto i = it; i >= requests.begin();) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
            --i;
        }
        for (auto i = requests.begin(); i < it; ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
    } else { // Towards max track
        for (auto i = it; i < requests.end(); ++i) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
        }
        for (auto i = it - 1; i >= requests.begin();) {
            seekTime += abs(*i - currentTrack);
            currentTrack = *i;
            --i;
        }
    }
    return seekTime;
}

int main() {
    vector<int> requests = {82, 170, 43, 140, 24, 16, 190}; // Example request seq
    int head = 50; // Example initial head position
    int direction = 1; // 0 for towards track, 1 for towards max track
    cout << "FCFS Seek Time: " << fcfs(requests, head) << endl;
    cout << "SSTF Seek Time: " << sstf(requests, head) << endl;
    cout << "SCAN Seek Time: " << scan(requests, head, direction) << endl;
    cout << "LOOK Seek Time: " << look(requests, head, direction) << endl;
    cout << "CSCAN Seek Time: " << cscan(requests, head, direction) << endl;
    cout << "CLOOK Seek Time: " << clook(requests, head, direction) << endl;
    return 0;
}
