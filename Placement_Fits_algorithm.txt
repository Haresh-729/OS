#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    int block_add[] = {0, 100, 600, 800, 1100, 1700}; //100 500 200 300 600
    int block_size[5];

    for (int i = 1; i < 6; ++i) {
        block_size[i - 1] = block_add[i] - block_add[i - 1];
    }

    cout << "Performed by Haresh Kurade (C200) 60004230277." << endl;

    int n;
    cout << "Enter the number of processes: ";
    cin >> n;
   
    int p[n];
    cout << "Enter process size: " << endl;
    for (int i = 0; i < n; ++i) {
        cout << "Process " << i + 1 << ": ";
        cin >> p[i];
    }

    cout << "---------Best Fit--------" << endl;
    int total_all = 0;
    int allocated[5] = {0};

    for (int pr : p) {
        int diff[5];
        for (int j = 0; j < 5; ++j) {
            diff[j] = block_size[j] - pr;
        }
        int diff1[5];
        copy(diff, diff + 5, diff1);
        sort(diff1, diff1 + 5);

        if (diff1[4] > 0) {
            int i = 0;
            while (diff1[i] < 0) {
                ++i;
            }
            if (allocated[distance(diff, find(diff, diff + 5, diff1[i]))] != 0) {
                ++i;
                if (i < 5) {
                    i = distance(diff, find(diff, diff + 5, diff1[i]));
                }
            }
            else {
                i = distance(diff, find(diff, diff + 5, diff1[i]));
            }
            allocated[i] = 1;
            total_all += pr;
            cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " assigned block " << i + 1 << endl;
        }
        else {
            cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " cannot be accommodated" << endl;
        }
    }
    double eff = (total_all / static_cast<double>(block_add[5])) * 100;
    cout << "Efficiency: " << eff << endl;

    cout << "---------Worst Fit--------" << endl;
    total_all = 0;
    fill_n(allocated, 5, 0);

    for (int pr : p) {
        int diff[5];
        for (int j = 0; j < 5; ++j) {
            diff[j] = block_size[j] - pr;
        }
        int diff1[5];
        copy(diff, diff + 5, diff1);
        sort(diff1, diff1 + 5);

        if (diff1[4] > 0) {
            int i = 0;
            while (allocated[distance(diff, find(diff, diff + 5, diff1[i - 1]))] != 0) {
                --i;
            }
            if (diff1[i - 1] < 0) {
                cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " cannot be accommodated" << endl;
                continue;
            }
            i = distance(diff, find(diff, diff + 5, diff1[i - 1]));
            allocated[i] = 1;
            total_all += pr;
            cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " assigned block " << i + 1 << endl;
        }
        else {
            cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " cannot be accommodated" << endl;
        }
    }
    eff = (total_all / static_cast<double>(block_add[5])) * 100;
    cout << "Efficiency: " << eff << endl;

    cout << "---------First Fit--------" << endl;
    total_all = 0;
    fill_n(allocated, 5, 0);

    for (int pr : p) {
        int diff[5];
        for (int j = 0; j < 5; ++j) {
            diff[j] = block_size[j] - pr;
        }
        int diff1[5];
        copy(diff, diff + 5, diff1);
        sort(diff1, diff1 + 5);

        if (diff1[4] > 0) {
            int i = 0;
            while (i < 5 && (allocated[i] != 0 || diff[i] < 0)) {
                ++i;
            }
            if (i >= 5) {
                cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " cannot be accommodated" << endl;
                continue;
            }
            allocated[i] = 1;
            total_all += pr;
            cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " assigned block " << i + 1 << endl;
        }
        else {
            cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " cannot be accommodated" << endl;
        }
    }
    eff = (total_all / static_cast<double>(block_add[5])) * 100;
    cout << "Efficiency: " << eff << endl;

    cout << "---------Next Fit--------" << endl;
    total_all = 0;
    fill_n(allocated, 5, 0);
    int last_allocated_index = -1; // Initialize the last allocated block index

    for (int pr : p) {
        int diff[5];
        for (int j = 0; j < 5; ++j) {
            diff[j] = block_size[j] - pr;
        }
        int diff1[5];
        copy(diff, diff + 5, diff1);
        sort(diff1, diff1 + 5);

        if (diff1[4] > 0) {
            int i = (last_allocated_index + 1) % 5; // Start searching from the last allocated block index
            while (allocated[i] != 0 || diff[i] < 0) {
                i = (i + 1) % 5; // Move to the next block
                if (i == (last_allocated_index + 1) % 5) {
                    break; // If we have traversed all blocks once, break the loop
                }
            }
            if (i != (last_allocated_index + 1) % 5) { // If we found a suitable block
                allocated[i] = 1;
                total_all += pr;
                last_allocated_index = i; // Update the last allocated block index
                cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " assigned block " << i + 1 << endl;
            } else {
                cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " cannot be accommodated" << endl;
            }
        } else {
            cout << "Process " << distance(p, find(p, p + n, pr)) + 1 << " cannot be accommodated" << endl;
        }
    }
    eff = (total_all / static_cast<double>(block_add[5])) * 100;
    cout << "Efficiency: " << eff << endl;

    return 0;
}
